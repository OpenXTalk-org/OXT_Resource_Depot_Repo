/**
ClockAround v125 [-hh fecit, Oct 2016/Oct 2018]

Widget 'ClockAround' displays an analogue clock. The clock has (optionally) FengShui-colored centers which are used depending on the time, see the (read only) property fengShuiColoring.
The current setting is:
_[from 05:00 to 10:00 color "morning green" = "0,204,153"]_,
_[from 10:00 to 12:00 color "forenoon red" = "255,102,0"]_,
_[from 12:00 to 15:00 color "noon yellow" = "255,204,102"]_,
_[from 15:00 to 17:00 color "afternoon white" = "255,255,255"]_,
_[from 17:00 to 22:00 color "evening light blue" = "102,102,255"]_,
_[from 22:00 to 05:00 color "night blue" = "0,0,255"]_.
The clock displays 24 hours (12:00 at bottom) or 12 hours around the clock.
The time may be chosen as local or with any offset to universal time (UTC).
This "timezone" uses in the property inspector only the built-in LC editor.
Full hour values are also available by RightClicking the inner ring of widget.
RightClicking the outer ring of the widget ("face") shows a menu of the four main settings.

You can show arcs, dots and hands for each of hours, minutes and seconds.
Dots overlay the tip of arcs, hands overlay dots.

The widget passes the following messages to LC Script (you can use them in your widget's script):
mouseDown (late), mouseEnter, mouseLeave, mouseUp.
**/

widget org.openxtalk.hermann.clockaround

use com.livecode.canvas
use com.livecode.widget
use com.livecode.engine
use com.livecode.math

constant kWidgetVersion is "hhClockAround_v125 [fat widget]"
metadata version is "1.2.5"
metadata title is "hhAClox"
metadata author is "Hermann Hoch"
metadata preferredSize is "128,128"
metadata svgicon is "M0 63.5 C 0 127,0 127,140.5 127 C 281 127,281 127,281 63.5 C 281 0,281 0,140.5 0 C 0 0,0 0,0 63.5 M154.719 63.250 C 154.938 98,154.938 98,146.969 98 C 139 98,139 98,139 63.667 C 139 44.783,139.318 29.015,139.706 28.627 C 140.095 28.239,143.582 28.051,147.456 28.210 C 154.5 28.5,154.5 28.5,154.719 63.250 M65.032 64 C 72.055 80.225,77.491 93.832,77.113 94.237 C 76.384 95.019,61.782 100.170,61.491 99.748 C 61.397 99.612,59.720 95.450,57.763 90.5 C 54.207 81.5,54.207 81.5,43.012 81.5 C 31.817 81.5,31.817 81.5,28.204 90.5 C 26.217 95.450,24.534 99.612,24.465 99.748 C 24.307 100.055,9.826 95.159,9.282 94.615 C 9.066 94.399,14.148 82.134,20.576 67.361 C 27.003 52.587,32.892 39.020,33.661 37.211 C 35.059 33.923,35.059 33.923,43.661 34.211 C 52.264 34.5,52.264 34.5,65.032 64 M128.327 34.750 C 128.572 35.163,129.085 38.247,129.467 41.604 C 130.162 47.707,130.162 47.707,123.331 48.375 C 112.733 49.410,106.224 51.819,101.313 56.524 C 97.202 60.464,97 60.928,97 66.446 C 97 71.806,97.278 72.512,100.750 75.964 C 105.441 80.629,113.491 83.689,123.442 84.591 C 131.080 85.283,131.080 85.283,130.485 89.892 C 129.166 100.121,130.093 99.362,119.695 98.715 C 99.026 97.427,84.607 88.679,80.034 74.651 C 78.377 69.568,79.125 59.510,81.533 54.5 C 85.606 46.024,96.302 38.576,108.721 35.567 C 114.961 34.055,127.602 33.528,128.327 34.750 M203.436 51.410 C 215.386 58.413,219.353 74.231,212.375 87.053 C 206.402 98.027,191.143 102.751,178.5 97.540 C 169.551 93.851,164.026 84.767,164.010 73.718 C 163.998 65.830,165.769 60.889,170.301 56.165 C 176.246 49.967,181.812 47.934,191.644 48.370 C 197.243 48.618,199.794 49.275,203.436 51.410 M239.5 56.044 C 242.250 60.419,244.794 63.998,245.154 63.999 C 245.513 64,248.134 60.373,250.977 55.941 C 253.879 51.418,256.663 48.097,257.323 48.372 C 257.970 48.642,260.863 49.650,263.750 50.614 C 266.637 51.577,269 52.750,269 53.221 C 269 53.692,266.265 58.144,262.923 63.115 C 259.580 68.086,257.059 72.712,257.321 73.394 C 257.583 74.077,260.543 78.816,263.899 83.927 C 269.377 92.270,270.787 95,269.619 95 C 269.410 95,266.305 96.104,262.720 97.454 C 256.201 99.907,256.201 99.907,250.525 90.954 C 247.403 86.029,244.715 82,244.551 82 C 244.386 82,241.860 85.713,238.936 90.250 C 236.012 94.787,233.347 98.836,233.014 99.246 C 232.235 100.205,220.763 95.789,220.282 94.345 C 220.081 93.744,222.898 88.887,226.541 83.551 C 233.165 73.850,233.165 73.850,227.144 64.675 C 223.832 59.629,220.982 54.898,220.811 54.162 C 220.540 52.996,230.287 48.387,233.5 48.161 C 234.050 48.123,236.750 51.670,239.5 56.044 M38.701 60.750 C 35.193 69.5,35.193 69.5,39.097 69.807 C 41.244 69.977,44.762 69.977,46.915 69.807 C 50.830 69.5,50.830 69.5,47.243 60.750 C 45.269 55.938,43.330 52,42.932 52 C 42.535 52,40.631 55.938,38.701 60.750 M184.655 61.133 C 182.241 62.536,179.050 69.648,179.022 73.685 C 178.954 83.586,186.748 90.250,194.006 86.497 C 201.517 82.613,202.079 66.671,194.883 61.631 C 192.239 59.779,187.391 59.543,184.655 61.133Z"

--mark VARIABLES

variable mAllowContextMenu as Boolean
variable mAllowGrab as Boolean
variable mAutoDigitSize as Boolean
variable mCenter as List
variable mCenterColor as Color
variable mCurrentMode as String
variable mCurrentTime as List
variable mDigitBackColor as Color
variable mDigitColor as Color
variable mDigitSize as Number
variable mDown as Boolean
variable mE  as ScriptObject
variable mEffect2 as Effect
variable mFaceColor as Color
variable mGrab as Boolean
variable mHoursArc as Boolean
variable mHoursColor as Color
variable mHoursDot as Boolean
variable mHoursHand as Boolean
variable mIs24 as Boolean
variable mLocalOffset as Number
variable mMinutesArc as Boolean
variable mMinutesColor as Color
variable mMinutesDot as Boolean
variable mMinutesHand as Boolean
variable mMouse as Point
variable mNothing as String
variable mPlatform as String
variable mRadius as Number
variable mRightClick as Boolean
variable mSecondsArc as Boolean
variable mSecondsColor as Color
variable mSecondsDot as Boolean
variable mSecondsHand as Boolean
variable mShowDigital as Boolean
variable mShowOrigin24or12 as Boolean
variable mShowTicks as Boolean
variable mTicksColor as Color
variable mTimeZone as optional Number
variable mUseFengShuiColoring as Boolean
variable mWidgetVersion as String

--mark PUBLIC HANDLERS

--
public handler OnMouseDown()
	put the mouse position into mMouse
	put (the click button is 3) into mRightClick
	put true into mDown
	if mAllowContextMenu then
		if mRightClick and point \
				[the x of mMouse-mRadius, the y of mMouse-mRadius] \
				is within rectangle [-0.5*mRadius, -0.5*mRadius, 0.5*mRadius, 0.5*mRadius] then
			variable tOffset as Number
			variable tCurrent as Number
			put (mLocalOffset/3600) into tOffset
			if mTimeZone is nothing then
				put tOffset into tCurrent
			else
				put mTimeZone/3600 into tCurrent
			end if
			variable tC as Number
			variable tString as String
			variable tMenu as String
			variable tMenuL as List
			put the empty list into tMenuL
			repeat with tC from -12 up to 12
				if tC < 0 then
					put "UTC " & (tC formatted as string) & " h" into tString
				else if tC > 0 then
					put "UTC +" & (tC formatted as string) & " h" into tString
				else
					put "UTC " & (tC formatted as string) & " h" into tString
				end if
				if tC = tOffset then
					put " = local" after tString
				end if
				if tC = tCurrent then
					put " = current" after tString
				end if
				push tString onto tMenuL
			end repeat
			combine tMenuL with newline into tMenu
			popup menu tMenu at the mouse position
			if the result is not nothing then
				variable tStringL as List
				split the result by " " into tStringL
				put 3600*(tStringL[2] parsed as number) into mTimeZone
				put element 4 to 7 of hhSecondsToDate() into mCurrentTime
				redraw all
			end if
		else if mRightClick then
			variable tB as Boolean
			variable tS as String
			put "Arcs\nDots\nHands\n-\nArcs and Dots\nArcs and Hands\n" into tS
			popup menu tS at the mouse position
			if the result is not nothing then
				put the result into mCurrentMode
				put (the offset of "Arcs" in mCurrentMode > 0) into tB
				put tB into mHoursArc
				put tB into mMinutesArc
				put tB into mSecondsArc
				put (the offset of "Dots" in mCurrentMode > 0) into tB
				put tB into mHoursDot
				put tB into mMinutesDot
				put tB into mSecondsDot
				put (the offset of "Hands" in mCurrentMode > 0) into tB
				put tB into mHoursHand
				put tB into mMinutesHand
				put tB into mSecondsHand
				put element 4 to 7 of hhSecondsToDate() into mCurrentTime
				redraw all
			end if
		end if
	end if
	if mAllowGrab and not mRightClick then
		put true into mGrab
		schedule timer in 0.08 seconds
	end if
	post "mouseDown" to mE with [the click button]
end handler

--
public handler OnMouseUp()
	put false into mDown
	put false into mGrab
  	send "mouseUp" to mE with [the click button]
end handler

--
public handler OnEnter()
  send "mouseEnter" to mE
end handler

--
public handler OnLeave()
  send "mouseLeave" to mE
end handler

--
public handler OnCreate()
	put kWidgetVersion into mWidgetVersion
	put my script object into mE
	put nothing into mTimeZone -- local time
	put 64 into mRadius
	put 12 into mDigitSize
	put false	into mIs24
	put true		into mAllowContextMenu
	put true		into mAllowGrab
	put true		into mAutoDigitSize
	put "Hands" into mCurrentMode
	put false 	into mHoursArc
	put false 	into mMinutesArc
	put false	into mSecondsArc
	put true	into mHoursDot
	put true	into mMinutesDot
	put true	into mSecondsDot
	put true	into mHoursHand
	put true	into mMinutesHand
	put true	into mSecondsHand
	put true	into mShowDigital
	put false	into mShowOrigin24or12
	put false	into mShowTicks
	put true	into mUseFengShuiColoring
	put [0,0,0] into mCurrentTime
	put color [0.0,0.0,0.0] into mDigitColor
	put color [0.8,0.8,0.8,0.8] into mDigitBackColor
	put color [1.0,0.0,0.0] into mHoursColor
	put color [1.0,1.0,0.0] into mMinutesColor
	put color [0.0,0.0,1.0] into mSecondsColor
	put color [0.5,0.5,0.5] into mCenterColor
	put color [0.8,0.8,0.8] into mFaceColor
	put color [1,1,1,0.62] into mTicksColor
	put outer shadow effect into mEffect2
	set the color of mEffect2 to color[0,0,0]
	set the size of mEffect2 to 1
	set the spread of mEffect2 to 0
	set the distance of mEffect2 to 3
end handler

--
public handler OnOpen()
  execute script "return (the platform is quote&win32&quote)"
  if the result then
    put "Win32" into mPlatform
  else
    put "MacOS or Linux" into mPlatform
  end if
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  setDigitSize(mDigitSize)
  schedule timer in 1 - (the universal time mod 1) seconds
  post "put the topleft of me into TL; set the width of me to max(64,the width of me); set the height of me to the width of me; set topleft of me to TL"
end handler

--
public handler OnPaint()
	variable tPath as Path
	variable tFS as Number
	variable tFSColor as String
	set the antialias of this canvas to true
	put [mRadius, mRadius] into mCenter
	translate this canvas by mCenter
	set the stroke width of this canvas to 0.5*mRadius
	set the paint of this canvas to solid paint with mFaceColor
	stroke circle path centered at point [0,0] with radius 0.75*mRadius on this canvas
	variable tHourRadius as Number
	variable tMinuteRadius as Number
	variable tSecondRadius as Number
	put 0.586*mRadius into tHourRadius
	put 0.748*mRadius into tMinuteRadius
	put 0.910*mRadius into tSecondRadius
	put element 1 of mCurrentTime into tFS
	if tFS < 5 then -- night blue
	 	put "0,0,255" into tFSColor
	else if tFS < 10 then -- morning green
	 	put "0,204,153" into tFSColor
	else if tFS < 12  then -- forenoon red
	 	put "255,102,0" into tFSColor
	else if tFS < 15  then -- noon yellow
	 	put "255,204,102" into tFSColor
	else if tFS < 17  then -- afternoon white
	 	put "255,255,255" into tFSColor
	else if tFS < 22  then -- evening light blue
	 	put "102,102,255" into tFSColor
	else -- night blue
	 	put "0,0,255" into tFSColor
	end if
--mark  inner face
	if mUseFengShuiColoring then
		set the paint of this canvas to solid paint with hhStringToColor(tFSColor)
	else
	  	set the paint of this canvas to solid paint with mCenterColor
	end if
	put circle path centered at point [0,0] with radius tHourRadius into tPath
	fill tPath  on this canvas
	set the stroke width of this canvas to 1
	if mUseFengShuiColoring then
		set the paint of this canvas to solid paint with hhStringToColor(tFSColor&",128")
	else
		set the paint of this canvas to solid paint with mCenterColor
	end if
	stroke tPath  on this canvas
--mark  outer face
	variable tHourPoint as Point
	variable tHourAngle as Number
	variable tMinuteAngle as Number
	variable tSecondAngle as Number
	variable tMinutePoint as Point
	variable tSecondPoint as Point
	variable tHourValue as Number
	variable tMinuteValue as Number
	variable tSecondValue as Number
	if mIs24 then
	 	put 15*((element 1 of mCurrentTime) + (element 2 of mCurrentTime)/60) into tHourAngle
	else
	 	put 30*((element 1 of mCurrentTime) mod 12 + (element 2 of mCurrentTime)/60) into tHourAngle
	end if
	put tHourAngle*pi/180 into tHourValue
	put 6*(element 2 of mCurrentTime + element 3 of mCurrentTime/60) into tMinuteAngle
	put tMinuteAngle*pi/180 into tMinuteValue
	put 6*(element 3 of mCurrentTime) into tSecondAngle
	put tSecondAngle*pi/180 into tSecondValue
	set the paint of this canvas to solid paint with mTicksColor
	stroke circle path centered at point [0,0] with radius tHourRadius on this canvas
	stroke circle path centered at point [0,0] with radius tMinuteRadius on this canvas
	stroke circle path centered at point [0,0] with radius tSecondRadius on this canvas
	stroke circle path centered at point [0,0] with radius mRadius on this canvas
--mark  ticks
	variable tRadius2
	put 0.04*mRadius into tRadius2
	if mShowTicks then
	 variable tX as Integer
	 put the empty path into tPath
	 variable tLimit as Number
	 if mIs24 then
		put 120 into tLimit
	 else
		put 60 into tLimit
	 end if
	 repeat with tX from 1 up to tLimit
		variable tS as Number
		variable tC as Number
		put sin(2*tX*pi/tLimit) into tS
		put - cos(2*tX*pi/tLimit) into tC
		if tX mod 5 = 0 then
		  add line path from point [tHourRadius*tS,tHourRadius*tC] to \
		  			point [tMinuteRadius*tS,tMinuteRadius*tC] to tPath
		end if
		if mIs24 then
		  if tX mod 2 = 0 then
			 add line path from point [tMinuteRadius*tS,tMinuteRadius*tC] to \
			 		point [mRadius*tS,mRadius*tC] to tPath
		  end if
		else
		  add line path from point [tMinuteRadius*tS,tMinuteRadius*tC] to \
		  			point [mRadius*tS,mRadius*tC] to tPath
		end if
	 end repeat
	 set the paint of this canvas to solid paint with mTicksColor
	 set the stroke width of this canvas to tRadius2*0.1
	 stroke tPath on this canvas
	end if
-- arcs, dots and hands
	--set the join style of this canvas to "miter"
	put point [tHourRadius*sin(tHourValue),-tHourRadius*cos(tHourValue)] into tHourPoint
	put point [tMinuteRadius*sin(tMinuteValue),-tMinuteRadius*cos(tMinuteValue)] into tMinutePoint
	put point [tSecondRadius*sin(tSecondValue),-tSecondRadius*cos(tSecondValue)] into tSecondPoint
	set the stroke width of this canvas to tRadius2
	set the paint of this canvas to solid paint with mHoursColor
--mark  hours arc
	if mHoursArc then
	 	variable tPathHour as Path
		put arc path centered at point [0,0] with radius \
			tHourRadius from -90 to -90+tHourAngle into tPathHour
	 	set the stroke width of this canvas to 0.162*mRadius
		set the cap style of this canvas to "butt"
	 	stroke tPathHour on this canvas
		fill arc path centered at tHourPoint with radius \
			0.081*mRadius from -90+tHourAngle-1 to 90+tHourAngle+1 on this canvas
	end if
--mark  hours hand or dot
	begin layer with mEffect2 on this canvas
	 if mHoursHand then
		set the stroke width of this canvas to tRadius2*3.24
		set the cap style of this canvas to "round"
		stroke line path from point [0,0] to tHourPoint on this canvas
		fill circle path centered at tHourPoint with radius tRadius2*1.62 on this canvas
	 else if mHoursDot then
		fill circle path centered at tHourPoint with radius tRadius2*1.62 on this canvas
	 end if
	end layer on this canvas
--mark  minutes arc
	set the paint of this canvas to solid paint with mMinutesColor
	if mMinutesArc then
	 	variable tPathMinute as Path
	 	put arc path centered at point [0,0] with radius \
	 	tMinuteRadius from -90 to -90+tMinuteAngle into tPathMinute
	 	set the stroke width of this canvas to 0.162*mRadius
		set the cap style of this canvas to "butt"
	 	stroke tPathMinute on this canvas
	 	fill arc path centered at tMinutePoint with radius \
	 		0.081*mRadius from -90+tMinuteAngle-1 to 90+tMinuteAngle+1 on this canvas
	end if
--mark  minutes hand or dot
	begin layer with mEffect2 on this canvas
	 if mMinutesHand then
		set the stroke width of this canvas to tRadius2*1.62
		set the cap style of this canvas to "round"
		stroke line path from point [0,0] to tMinutePoint on this canvas
		fill circle path centered at tMinutePoint with radius tRadius2*0.81 on this canvas
	 else if mMinutesDot then
		fill circle path centered at tMinutePoint with radius tRadius2*1.62 on this canvas
	 end if
	end layer on this canvas
	set the paint of this canvas to solid paint with mSecondsColor
--mark  seconds arc
	if mSecondsArc then
	 	variable tPathSecond as Path
	 	put arc path centered at point [0,0] with radius \
	 	tSecondRadius from -90 to -90+tSecondAngle into tPathSecond
	 	set the stroke width of this canvas to 0.162*mRadius
	 	set the cap style of this canvas to "butt"
	 	stroke tPathSecond on this canvas
	 	fill arc path centered at tSecondPoint with radius \
	 		0.081*mRadius from -90+tSecondAngle-1 to 90+tSecondAngle+1 on this canvas
	end if
--mark  seconds hand or dot
	begin layer with mEffect2 on this canvas
	 if mSecondsHand then
		set the stroke width of this canvas to tRadius2*0.81
		set the cap style of this canvas to "round"
		stroke line path from point [0,0] to tSecondPoint on this canvas
		fill circle path centered at tSecondPoint with radius tRadius2*0.4 on this canvas
	 else if mSecondsDot then
		fill circle path centered at tSecondPoint with radius tRadius2*1.62 on this canvas
	 end if
	end layer on this canvas
--mark  center dot and digital
	variable tRadius3 as Number
	variable tColor as Color
	put mFaceColor into tColor
	set the alpha of tColor to 1
	if mShowOrigin24or12 then
		set the paint of this canvas to solid paint with tColor
		if mHoursHand or mMinutesHand or mSecondsHand or mHoursArc or mMinutesArc or mSecondsArc then
		  put tRadius2*1.9 into tRadius3
		else
			put tRadius2*1.2 into tRadius3
		end if
		if mIs24 then
			fill circle path centered at point [-tRadius2,0] with radius tRadius3 on this canvas
			fill circle path centered at point [tRadius2,0] with radius tRadius3 on this canvas
		else
			fill circle path centered at point [0,0] with radius tRadius3 on this canvas
		end if
	else if mHoursHand or mMinutesHand or mSecondsHand then
	 	set the paint of this canvas to solid paint with tColor
	 	fill circle path centered at point [0,0] with radius tRadius2*1.9 on this canvas
	else if mShowDigital then
		variable tS as String
		variable tR1 as Rectangle
		variable tR2 as Rectangle
		variable tN as Number
		variable tN2 as Number
		put element 1 of mCurrentTime into tN
		if tN < 10 then
			put "0" & (tN formatted as string) & ":" into tS
		else
			put (tN formatted as string) & ":" into tS
		end if
		put element 2 of mCurrentTime into tN
		if tN < 10 then
			put "0" & (tN formatted as string) & ":" after tS
		else
			put (tN formatted as string) & ":" after tS
		end if
		put element 3 of mCurrentTime into tN
		if tN < 10 then
			put "0" & (tN formatted as string) after tS
		else
			put (tN formatted as string) after tS
		end if
		variable tF as Font
		put my font into tF
	 	set the size of tF to mDigitSize
	 	set the font of this canvas to tF
		measure tS on this canvas
		put the result into tR1
		measure "45:67:09" on this canvas
		put the result into tR2
		put (the maximum of the width  of tR1 and the width  of tR2)/2 into tN
		put (the maximum of the height of tR1 and the height of tR2)/2 into tN2
		put rectangle [-2-tN, -2-tN2, 2+tN, 2+tN2] into tR2
	 	set the paint of this canvas to solid paint with mDigitBackColor
	 	fill rounded rectangle path of tR2 with radius 4 on this canvas
	 	set the paint of this canvas to solid paint with mDigitColor
		fill text tS at point [-tN,0.62*tN2] on this canvas
	end if
end handler

--
public handler OnTimer()
	if mGrab then -- grab
		variable tMouse as Point
		put the mouse position into tMouse
		if the abs of (the x of tMouse - the x of mMouse) + \
				the abs of (the y of tMouse - the y of mMouse) > 0 then
			variable tRect as Rectangle
			put my rectangle into tRect
			set property "left" of mE to \
				(the left of tRect + the x of tMouse - the x of mMouse)
			set property "top"  of mE to \
				(the top  of tRect + the y of tMouse - the y of mMouse)
		end if
		schedule timer in 0.04 seconds
	else
      if my width is not 2*mRadius then
      	set property "width" of mE to 2*mRadius
      end if
      if my height is not 2*mRadius then
      	set property "height" of mE to 2*mRadius
      end if
  		put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  		schedule timer in 1 - (the universal time mod 1) seconds
  	end if
  	redraw all
end handler

--
public handler OnSave(out rProp as Array)
  put the empty array into rProp
  put mTimeZone	into rProp["timeZone"]
  put mRadius into rProp["clockRadius"]
  put mHoursArc	into rProp["hoursArc"]
  put mMinutesArc	into rProp["minutesArc"]
  put mSecondsArc	into rProp["secondsArc"]
  put mHoursDot	into rProp["hoursDot"]
  put mMinutesDot	into rProp["minutesDot"]
  put mSecondsDot	into rProp["secondsDot"]
  put mHoursHand	into rProp["hoursHand"]
  put mMinutesHand into rProp["minutesHand"]
  put mSecondsHand into rProp["secondsHand"]
  put hhColorToString(mDigitBackColor)	into rProp["digitBackColor"]
  put hhColorToString(mDigitColor)	into rProp["digitColor"]
  put hhColorToString(mHoursColor)	into rProp["hoursColor"]
  put hhColorToString(mMinutesColor) into rProp["minutesColor"]
  put hhColorToString(mSecondsColor) into rProp["secondsColor"]
  put hhColorToString(mCenterColor)	into rProp["faceColor"]
  put hhColorToString(mFaceColor)   into rProp["faceColor"]
  put hhColorToString(mTicksColor)  into rProp["ticksColor"]
  put mAllowContextMenu into rProp["allowContextMenu"]
  put mAllowGrab into rProp["allowGrab"]
  put mAutoDigitSize into rProp["autoDigitSize"]
  put mDigitSize into rProp["digitSize"]
  put mIs24 into rProp["is24"]
  put mShowDigital into rProp["showDigital"]
  put mShowOrigin24or12 into rProp["showOrigin24or12"]
  put mShowTicks into rProp["showTicks"]
  put mUseFengShuiColoring into rProp["useFengShuiColoring"]
end handler

--
public handler OnLoad(in rProp as Array)
  put my script object into mE
  if "timeZone" is not among the keys of rProp then
    put nothing into mTimeZone -- local time
  else
    put rProp["timeZone"] into mTimeZone
  end if
  if "clockRadius" is not among the keys of rProp then
    put 64 into mRadius
  else
    put rProp["clockRadius"] into mRadius
  end if
  if "hoursArc" is not among the keys of rProp then
    put false into mHoursArc
  else
    put rProp["hoursArc"] into mHoursArc
  end if
  if "minutesArc" is not among the keys of rProp then
    put false into mMinutesArc
  else
    put rProp["minutesArc"] into mMinutesArc
  end if
  if "secondsArc" is not among the keys of rProp then
    put false into mSecondsArc
  else
    put rProp["secondsArc"] into mSecondsArc
  end if
  if "hoursDot" is not among the keys of rProp then
    put true into mHoursDot
  else
    put rProp["hoursDot"] into mHoursDot
  end if
  if "minutesDot" is not among the keys of rProp then
    put true into mMinutesDot
  else
    put rProp["minutesDot"] into mMinutesDot
  end if
  if "secondsDot" is not among the keys of rProp then
    put true into mSecondsDot
  else
    put rProp["secondsDot"] into mSecondsDot
  end if
  if "hoursHand" is not among the keys of rProp then
    put true into mHoursHand
  else
    put rProp["hoursHand"] into mHoursHand
  end if
  if "minutesHand" is not among the keys of rProp then
    put true into mMinutesHand
  else
    put rProp["minutesHand"] into mMinutesHand
  end if
  if "secondsHand" is not among the keys of rProp then
    put true into mSecondsHand
  else
    put rProp["secondsHand"] into mSecondsHand
  end if
  if "digitBackColor" is not among the keys of rProp then
    put color [0.8,0.8,0.8,0.8] into mDigitBackColor
  else
    put hhStringToColor(rProp["digitBackColor"]) into mDigitBackColor
  end if
  if "digitColor" is not among the keys of rProp then
    put color [0.0,0.0,0.0] into mDigitColor
  else
    put hhStringToColor(rProp["digitColor"]) into mDigitColor
  end if
  if "hoursColor" is not among the keys of rProp then
    put color [1.0,0.0,0.0] into mHoursColor
  else
    put hhStringToColor(rProp["hoursColor"]) into mHoursColor
  end if
  if "minutesColor" is not among the keys of rProp then
    put color [1.0,1.0,0.0] into mMinutesColor
  else
    put hhStringToColor(rProp["minutesColor"]) into mMinutesColor
  end if
  if "secondsColor" is not among the keys of rProp then
    put color [0.0,0.0,1.0] into mSecondsColor
  else
    put hhStringToColor(rProp["secondsColor"]) into mSecondsColor
  end if
  if "centerColor" is not among the keys of rProp then
    put color [0.8,0.8,0.8] into mCenterColor
  else
    put hhStringToColor(rProp["centerColor"]) into mCenterColor
  end if
  if "faceColor" is not among the keys of rProp then
    put color [0.8,0.8,0.8] into mFaceColor
  else
    put hhStringToColor(rProp["faceColor"]) into mFaceColor
  end if
  if "ticksColor" is not among the keys of rProp then
    put color [1,1,1,0.62] into mTicksColor
  else
    put hhStringToColor(rProp["ticksColor"]) into mTicksColor
  end if
  if "autoDigitSize" is not among the keys of rProp then
    put true into mAutoDigitSize
  else
    put rProp["autoDigitSize"] into mAutoDigitSize
  end if
  if "digitSize" is not among the keys of rProp then
    put 12 into mDigitSize
  else
    put rProp["digitSize"] into mDigitSize
  end if
  if "is24" is not among the keys of rProp then
    put false into mIs24
  else
    put rProp["is24"] into mIs24
  end if
  if "allowContextMenu" is not among the keys of rProp then
    put true into mAllowContextMenu
  else
    put rProp["allowContextMenu"] into mAllowContextMenu
  end if
  if "allowGrab" is not among the keys of rProp then
    put true into mAllowGrab
  else
    put rProp["allowGrab"] into mAllowGrab
  end if
  if "showDigital" is not among the keys of rProp then
    put true into mShowDigital
  else
    put rProp["showDigital"] into mShowDigital
  end if
  if "showOrigin24or12" is not among the keys of rProp then
    put false into mShowOrigin24or12
  else
    put rProp["showOrigin24or12"] into mShowOrigin24or12
  end if
  if "showTicks" is not among the keys of rProp then
    put false into mShowTicks
  else
    put rProp["showTicks"] into mShowTicks
  end if
  if "useFengShuiColoring" is not among the keys of rProp then
    put true into mUseFengShuiColoring
  else
    put rProp["useFengShuiColoring"] into mUseFengShuiColoring
  end if
end handler

--mark PRIVATE HANDLERS

--
handler setIs24(in pIs24 as Boolean) returns nothing
  put pIs24 into mIs24
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setHoursDot(in pBool as Boolean) returns nothing
  put pBool into mHoursDot
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setMinutesDot(in pBool as Boolean) returns nothing
  put pBool into mMinutesDot
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setSecondsDot(in pBool as Boolean) returns nothing
  put pBool into mSecondsDot
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setHoursHand(in pBool as Boolean) returns nothing
  put pBool into mHoursHand
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setMinutesHand(in pBool as Boolean) returns nothing
  put pBool into mMinutesHand
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setSecondsHand(in pBool as Boolean) returns nothing
  put pBool into mSecondsHand
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setHoursArc(in pBool as Boolean) returns nothing
  put pBool into mHoursArc
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setMinutesArc(in pBool as Boolean) returns nothing
  put pBool into mMinutesArc
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setSecondsArc(in pBool as Boolean) returns nothing
  put pBool into mSecondsArc
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setShowTicks (in pBool as Boolean) returns nothing
  put pBool into mShowTicks
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setShowDigital (in pBool as Boolean) returns nothing
  put pBool into mShowDigital
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setShowOrigin24or12 (in pBool as Boolean) returns nothing
  put pBool into mShowOrigin24or12
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler setHoursColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mHoursColor
  redraw all
end handler

--
handler setAllowContextMenu(in pB as Boolean) returns nothing
  put pB into mAllowContextMenu
  redraw all
end handler

--
handler setAllowGrab(in pB as Boolean) returns nothing
  put pB into mAllowGrab
  redraw all
end handler

--
handler setClockRadius(in pN as Number) returns nothing
	put the maximum of pN and 32 into pN
	set property "width" of mE to 2*pN
	set property "height" of mE to 2*pN
  	put pN into mRadius
  	redraw all
end handler

--
handler setAutoDigitSize(in pB as Boolean) returns nothing
	put pB into mAutoDigitSize
	if pB then
		put the maximum of 10 and the rounded of (0.18*mRadius) into mDigitSize
	end if
  	redraw all
end handler

--
handler setDigitSize(in pN as Number) returns nothing
	if mAutoDigitSize then
		put the maximum of 10 and the rounded of (0.18*mRadius) into pN
	else
		put the rounded of (the minimum of pN and the rounded of (0.3*mRadius)) into pN
	end if
  	put pN into mDigitSize
  	redraw all
end handler

--
handler setUseFengShuiColoring(in pB as Boolean) returns nothing
  put pB into mUseFengShuiColoring
  redraw all
end handler

--
handler getHoursColor() returns String
  return hhColorToString(mHoursColor)
end handler

--
handler setMinutesColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mMinutesColor
  redraw all
end handler

--
handler getMinutesColor() returns String
  return hhColorToString(mMinutesColor)
end handler

--
handler setSecondsColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mSecondsColor
  redraw all
end handler

--
handler getSecondsColor() returns String
  return hhColorToString(mSecondsColor)
end handler

--
handler setCenterColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mCenterColor
  redraw all
end handler

--
handler getCenterColor() returns String
  return hhColorToString(mCenterColor)
end handler

--
handler setDigitBackColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mDigitBackColor
  redraw all
end handler

--
handler getDigitBackColor() returns String
  return hhColorToString(mDigitBackColor)
end handler

--
handler setDigitColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mDigitColor
  redraw all
end handler

--
handler getDigitColor() returns String
  return hhColorToString(mDigitColor)
end handler

--
handler setFaceColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mFaceColor
  redraw all
end handler

--
handler getFaceColor() returns String
  return hhColorToString(mFaceColor)
end handler

--
handler setTicksColor(in pColor as String) returns nothing
  put hhStringToColor(pColor) into mTicksColor
  redraw all
end handler

--
handler getTicksColor() returns String
  return hhColorToString(mTicksColor)
end handler

handler getFengShuiColoring() returns String
-- stopHour,name,colorRedChannel,colorGreenChannel,colorBlueChannel
return "-- stopHour, name, colorRed, colorGreen, colorBlue" & newline & \
  "5,night blue,0,0,255" & newline & \
  "10,morning green,0,204,153" & newline & \
  "12,forenoon red,255,102,0" & newline & \
  "15,noon yellow,255,204,102" & newline & \
  "17,afternoon white,255,255,255" & newline & \
  "22,evening light blue,102,102,255" & newline & \
  "24,night blue,0,0,255"
end handler
--
public handler OnGeometryChanged() returns nothing
  	variable tWidth as Number
  	put the maximum of my width and my height into tWidth
  	put the rounded of (the maximum of tWidth/2 and 32) into mRadius
  	if mAutoDigitSize then
  		put the maximum of 10 and the rounded of (0.18*mRadius) into mDigitSize
  	end if
end handler

--
handler setTimeZone(in pTimeZone as optional Number) returns nothing
  if not (pTimeZone is a number) then
    if pTimeZone is not nothing then
      throw "The timeZone offset must be a number or empty"
    end if
  end if
  put pTimeZone into mTimeZone
  put element 4 to 7 of hhSecondsToDate() into mCurrentTime
  redraw all
end handler

--
handler getTimeZone() returns Number
  if mTimeZone is not nothing then
    return mTimeZone
  else
    return hhLocalOffset()
  end if
end handler

-- converts universal time + current UTC-offset to date
handler hhSecondsToDate() returns List
  variable tOffset
  put hhLocalOffset() into mLocalOffset
  if mTimeZone is nothing then
    put mLocalOffset into tOffset
  else
    put mTimeZone into tOffset
  end if
  return hhAnySecondsToDate(the universal time, tOffset)
end handler

-- LCS workaround
handler hhLocalOffset() returns Number
  variable tX as String
  execute script "return word 6 of the internet date"
  put the result into tX
  return ((char 1 to 3 of tX) parsed as number)*3600  +  (((char 1 of tX) & (char 4 to 5 of tX)) parsed as number)*60
end handler

-- converts any unix-seconds to date
handler hhAnySecondsToDate(in pU as Number, in pOffset as Number) returns List
  variable tL as List
  put [0,0,0,0,0,0,0] into tL
  variable tU as Number
  variable tS as Number
  variable tB as Number
  variable tC as Number
  variable tD as Number
  variable tE as Number
  put pOffset into tL[7]
  if mPlatform is "Win32" then
    put the trunc of (pU + pOffset - mLocalOffset) into tU
  else
    put the trunc of (pU + pOffset) into tU
  end if
  put tU mod 86400 into tS
  put the trunc of (tU/86400) into tU
  put the trunc of (tS/3600) into tL[4]
  put (the trunc of (tS/60)) mod 60 into tL[5]
  put the trunc of (tS mod 60) into tL[6]
  put 15+the trunc of ((tU*4+102032)/146097) into tS -- second use of tS
  put tU+2442113+tS-the trunc of (tS/4) into tB
  put the trunc of ((tB*20-2442)/7305) into tC
  put tB-365*tC-the trunc of (tC/4) into tD
  put the trunc of (tD*1000/30601) into tE
  put tD-tE*30-the trunc of (tE*601/1000) into tL[3]
  if tE < 14 then
    put tC-4716 into tL[1]
    put tE-1 into tL[2]
  else
    put tC-4715 into tL[1]
    put tE-13 into tL[2]
  end if
  return tL
end handler

--
handler hhStringToColor(in pString as String) returns Color
  if the number of chars in pString is 0 then
     return color [0.0, 0.0, 0.0, 1.0]
  end if
  variable tList as List
  split pString by "," into tList
  variable tNum as Number
  put the number of elements in tList into tNum
  variable tR as Number
  variable tG as Number
  variable tB as Number
  variable tA as Number
  put ((element 1 of tList) parsed as number) into tR
  put ((element 2 of tList) parsed as number) into tG
  put ((element 3 of tList) parsed as number) into tB
  if tNum = 4 then -- put first tA in range 0-1
    put ((element 4 of tList) parsed as number) into tA
    if not ("." is in pString) then
      put tA/255 into tA
    end if
  else
    put 1.0 into tA
  end if
  if "." is in pString then
    return color [tR, tG, tB, tA]
  else
    return color [tR/255, tG/255, tB/255, tA]
  end if
end handler

-- Returns the color as a four-item string
handler hhColorToString(in pColor as Color) returns String
  variable tString as String
  if pColor is nothing then
    return "0,0,0,255"
  end if
  put (the trunc of ((the red of pColor) * 255)) formatted as string into tString
  put "," & (the trunc of ((the green of pColor) * 255)) formatted as string after tString
  put "," & (the trunc of ((the blue of pColor) * 255)) formatted as string after tString
  put "," & (the trunc of ((the alpha of pColor) * 255)) formatted as string after tString
  return tString
end handler

--
handler doNothing(in pS as String) returns nothing
end handler

--mark PROPERTIES

property widgetVersion get mWidgetVersion

--mark fengShuiColoring
/**
Syntax:
get the fengShuiColoring of <widget>
-- returns a 'header'-line and 7 value-lines of the form:
-- stopHour,name,colorRed,colorGreen,colorBlue
-- value-line 1 and 7 differ only in the first item.
Summary: Gets the "hour ramps" and the coloring in the hours range defined by that ramps.

Example:
get the fengShuiColoring of widget "AClox"

Description:
Use the fengShuiColoring property to get an info, for example if you wish to adjust the hoursColor, minutesColor or secondsColor accordingly.
The format are seven lines of text of the form _stopHour, name, colorRed, colorGreen, colorBlue_
StopHour is an hour (an integer between 1 and 24), the color values are integers between 0 and 255.
**/
property "fengShuiColoring"   get getFengShuiColoring
metadata fengShuiColoring.section is "Contents"

--mark useFengShuiColoring
/**
Syntax:
set the useFengShuiColoring of widget "AClox" to <trueOrFalse>

Summary: Whether to use fengShuiColoring for the clock's face.

Example:
get the useFengShuiColoring of widget "AClox"
set the useFengShuiColoring of widget "AClox" to "true"

Description: Switch the useFengShuiColoring (see property fengShuiColoring) of the widget on/off.
**/
property "useFengShuiColoring"   get mUseFengShuiColoring set setUseFengShuiColoring
metadata useFengShuiColoring.section is "Colors"
property "useFengShuiColoring2"   get mUseFengShuiColoring set setUseFengShuiColoring
metadata useFengShuiColoring2.section is "Contents"

--mark centerColor
/**
Syntax:
set the centerColor of <widget> to <pColor>
get the centerColor of <widget>

Summary:
Sets or gets the center color (outer ring).

Parameters:
pColor: The center color (inner ring), in RGB or RGBA format

Example:
set the centerColor of widget "AClox" to "255,127,0"
-- returns a _four-item_ string
get the centerColor of widget "AClox" -- "255,127,0,255"
set the centerColor of widget "AClox" to "255,127,0,127"

Description:
Use the centerColor property to set the color of the inner ring's color (if not owned by the widget's "FengShui colors", see property useFengShuiColors).
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "centerColor"    get getCenterColor  set setCenterColor
metadata centerColor.section  is "Colors"
metadata centerColor.editor is "com.livecode.pi.colorwithalpha"

--mark digitBackColor
/**
Syntax:
set the digitBackColor of <widget> to <pColor>
get the digitBackColor of <widget>

Summary: Sets or gets the back color of the digital display.

Parameters:
pColor: The digit-color, in RGB or RGBA format

Example:
set the digitBackColor of widget "AClox" to "0,0,0"
 -- returns a _four-item_ string
get the digitBackColor of widget "AClox" -- "0,0,0,255"
set the digitBackColor of widget "AClox" to "0,0,0,127"

Description:
Use the digitBackColor property to set the back color of the digital display (*if hands are not drawn*).
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "digitBackColor"   get getDigitBackColor set setDigitBackColor
metadata digitBackColor.section is "Colors"
metadata digitBackColor.editor  is "com.livecode.pi.colorwithalpha"

--mark digitColor
/**
Syntax:
set the digitColor of <widget> to <pColor>
get the digitColor of <widget>

Summary: Sets or gets the color of the digital display.

Parameters:
pColor: The digit-color, in RGB or RGBA format

Example:
set the digitColor of widget "AClox" to "0,0,0"
 -- returns a _four-item_ string
get the digitColor of widget "AClox" -- "0,0,0,255"
set the digitColor of widget "AClox" to "0,0,0,127"

Description:
Use the digitColor property to set the color of the digital display (*if hands are not drawn*).
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "digitColor"   get getDigitColor set setDigitColor
metadata digitColor.section is "Colors"
metadata digitColor.editor  is "com.livecode.pi.colorwithalpha"

--mark faceColor
/**
Syntax:
set the faceColor of <widget> to <pColor>
get the faceColor of <widget>

Summary:
Sets or gets the face color (outer ring).

Parameters:
pColor: The (outer ring's) face color, in RGB or RGBA format

Example:
set the faceColor of widget "AClox" to "255,127,0"
-- returns a _four-item_ string
get the faceColor of widget "AClox" -- "255,127,0,255"
set the faceColor of widget "AClox" to "255,127,0,127"

Description:
Use the faceColor property to set the color of the outer ring (the inner ring's color is owned by the widget's "FengShui colors").
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "faceColor"    get getFaceColor  set setFaceColor
metadata faceColor.section  is "Colors"
metadata faceColor.editor is "com.livecode.pi.colorwithalpha"

--mark hoursColor
/**
Syntax:
set the hoursColor of <widget> to <pColor>
get the hoursColor of <widget>

Summary: Sets or gets the color of the hours indicator (arc or hand or ball).

Parameters:
pColor: The hours-color, in RGB or RGBA format

Example:
set the hoursColor of widget "AClox" to "255,127,0"
 -- returns a _four-item_ string
get the hoursColor of widget "AClox" -- "255,127,0,255"
set the hoursColor of widget "AClox" to "255,127,0,127"

Description:
Use the hoursColor property to set the color of the hours arc or hand or ball.
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "hoursColor"   get getHoursColor set setHoursColor
metadata hoursColor.section is "Colors"
metadata hoursColor.editor  is "com.livecode.pi.colorwithalpha"

--mark minutesColor
/**
Syntax:
set the minutesColor of <widget> to <pColor>
get the minutesColor of <widget>

Summary: Sets or gets the color of the minutes indicator (arc or hand or ball).

Parameters:
pColor: The minutes-color, in RGB or RGBA format

Example:
set the minutesColor of widget "AClox" to "255,127,0"
-- returns a _four-item_ string
get the minutessColor of widget "AClox" -- "255,127,0,255"
set the minutesColor of widget "AClox" to "255,127,0,127"

Description:
Use the minutesColor property to set the color of the minutes arc or hand or ball.
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "minutesColor"     get getMinutesColor set setMinutesColor
metadata minutesColor.section is "Colors"
metadata minutesColor.editor  is "com.livecode.pi.colorwithalpha"

--mark secondsColor
/**
Syntax:
set the secondsColor of <widget> to <pColor>
get the secondsColor of <widget>

Summary: Sets or gets the color of the seconds indicator (arc or hand or ball).

Parameters:
pColor: The seconds-color, in RGB or RGBA format

Example:
set the secondsColor of widget "AClox" to "255,127,0"
-- returns a _four-item_ string
get the secondsColor of widget "AClox" -- "255,127,0,255"
set the secondsColor of widget "AClox" to "255,127,0,127"

Description:
Use the secondsColor property to set the color of the seconds arc or hand or ball.
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "secondsColor"   get getSecondsColor set setSecondsColor
metadata secondsColor.section is "Colors"
metadata secondsColor.editor  is "com.livecode.pi.colorwithalpha"

--mark ticksColor
/**
Syntax:
set the ticksColor of <widget> to <pColor>
get the ticksColor of <widget>

Summary:
Sets or gets the color of the clock's ticks.

Parameters:
pColor: The ticks color, in RGB or RGBA format

Example:
set the ticksColor of widget "AClox" to "255,127,0"
-- returns a _four-item_ string
get the ticksColor of widget "AClox" -- "255,127,0,255"
set the ticksColor of widget "AClox" to "255,127,0,127"

Description:
Use the ticksColor property to set the color of the clock's ticks. The visibility of the ticks is controlled by the showTicks property.
The color is in the form of a 3 or 4 item string, the 4th optional item being the alpha value, all integers between 0 and 255.
[You may also use numbers containing a decimal point between 0.0 and 1.0, for example "0.2,0.1,0.2".
.: The "get" always returns _four_ items in the integer form (each in range 0-255). :.
**/
property "ticksColor"   get getTicksColor set setTicksColor
metadata ticksColor.section is "Colors"
metadata ticksColor.editor  is "com.livecode.pi.colorwithalpha"

--mark timeZone
/**
Syntax:
set the timeZone of <widget> to <pOffset>
get the timeZone of <widget>

Parameters:
pOffset: is a number of seconds

Example:
-- set the offset to minus 2 hours and 30 minutes
-- 'the internet date' show this as "-0230"
set the timeZone of widget "AClox" to (-2*60 + 30)*60
-- returns the current offset from UTC in seconds
get the timeZone of widget "AClox"

Summary: The time zone offset from UTC in seconds. Default is your local offset.

Description:
Use the timeZone property to display the time of a timezone that may be different from
local time. If the timeZone property is set to empty, then the clock displays the local
time and get the timeZone returns the local UTC-offset.
**/
property timeZone     get getTimeZone   set setTimeZone
metadata timeZone.editor  is "com.livecode.pi.timezone"
metadata timeZone.label   is "Timezone"
metadata timeZone.default is ""

--mark clockRadius
/**
Syntax:
set the clockRadius of <widget> to <integer>
get the clockRadius of <widget>

Parameters:
positiveNumber: an integer > 31

Example:
set the clockRadius of widget "AClox" to 64
get the clockRadius of widget "AClox" -- returns 64

Summary: Control the size of the clock.

Description:
Use the clockRadius property to set the radius of the clock's circle.
*/
property clockRadius get mRadius set setClockRadius
metadata clockRadius.editor  is "com.livecode.pi.number"
metadata clockRadius.min is "32"
metadata clockRadius.step is "1"


--mark hoursArc
/**
Syntax:
set the hoursArc of <widget> to <pTrueOrFalse>
get the hoursArc of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the hoursArc of widget "AClox" to not \
    the hoursArc of widget "AClox"

Summary: Controls the visibility of the hours arc.

Description:
Use the hoursArc property to set the visibility of the hours arc to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property hoursArc     get mHoursArc   set setHoursArc
metadata hoursArc.editor  is "com.livecode.pi.boolean"

--mark minutesArc
/**
Syntax:
set the minutesArc of <widget> to <pTrueOrFalse>
get the minutesArc of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the minutesArc of widget "AClox" to not \
    the minutesArc of widget "AClox"

Summary: Controls the visibility of the minutes arc.

Description:
Use the minutesArc property to set the visibility of the minutes arc to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property minutesArc     get mMinutesArc set setMinutesArc
metadata minutesArc.editor  is "com.livecode.pi.boolean"

--mark secondsArc
/**
Syntax:
set the secondsArc of <widget> to <pTrueOrFalse>
get the secondsArc of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the secondsArc of widget "AClox" to not \
    the secondsArc of widget "AClox"

Summary: Controls the visibility of the seconds arc.

Description:
Use the secondsArc property to set the visibility of the seconds arc to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property secondsArc     get mSecondsArc set setSecondsArc
metadata secondsArc.editor  is "com.livecode.pi.boolean"

--mark hoursDot
/**
Syntax:
set the hoursDot of <widget> to <pTrueOrFalse>
get the hoursDot of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the hoursDot of widget "AClox" to not \
    the hoursDot of widget "AClox"

Summary: Controls the visibility of the hours dot.

Description:
Use the hoursDot property to set the visibility of the hours dot to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property hoursDot      get mHoursDot    set setHoursDot
metadata hoursDot.editor   is "com.livecode.pi.boolean"

--mark minutesDot
/**
Syntax:
set the minutesDot of <widget> to <pTrueOrFalse>
get the minutesDot of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the minutesDot of widget "AClox" to not \
    the minutesDot of widget "AClox"

Summary: Controls the visibility of the minutes dot.

Description:
Use the minutesDot property to set the visibility of the minutes dot to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property minutesDot    get mMinutesDot  set setMinutesDot
metadata minutesDot.editor is "com.livecode.pi.boolean"

--mark secondsDot
/**
Syntax:
set the secondsDot of <widget> to <pTrueOrFalse>
get the secondsDot of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the secondsDot of widget "AClox" to not \
    the secondsDot of widget "AClox"

Summary: Controls the visibility of the seconds dot.

Description:
Use the secondsDot property to set the visibility of the seconds dot to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property secondsDot    get mSecondsDot  set setSecondsDot
metadata secondsDot.editor is "com.livecode.pi.boolean"

--mark hoursHand
/**
Syntax:
set the hoursHand of <widget> to <pTrueOrFalse>
get the hoursHand of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the hoursHand of widget "AClox" to not \
    the hoursHand of widget "AClox"

Summary: Controls the visibility of the hours hand.

Description:
Use the hoursHand property to set the visibility of the hours hand to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property hoursHand      get mHoursHand    set setHoursHand
metadata hoursHand.editor   is "com.livecode.pi.boolean"

--mark minutesHand
/**
Syntax:
set the minutesHand of <widget> to <pTrueOrFalse>
get the minutesHand of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the minutesHand of widget "AClox" to not \
    the minutesHand of widget "AClox"

Summary: Controls the visibility of the minutes hand.

Description:
Use the minutesHand property to set the visibility of the minutes hand to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property minutesHand    get mMinutesHand  set setMinutesHand
metadata minutesHand.editor is "com.livecode.pi.boolean"

--mark secondsHand
/**
Syntax:
set the secondsHand of <widget> to <pTrueOrFalse>
get the secondsHand of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the secondsHand of widget "AClox" to not \
    the secondsHand of widget "AClox"

Summary: Controls the visibility of the seconds hand.

Description:
Use the secondsHand property to set the visibility of the seconds hand to true or false.
Dots overlay the tip of arcs, hands overlay dots.
*/
property secondsHand    get mSecondsHand  set setSecondsHand
metadata secondsHand.editor is "com.livecode.pi.boolean"

--mark showTicks
/**
Syntax:
set the showTicks of <widget> to <pTrueOrFalse>
get the showTicks of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the showTicks of widget "AClox" to not \
    the showTicks of widget "AClox"

Summary: Controls the visibility of the clock's ticks.

Description:
Use the showTicks property to set the visibility of the clock's ticks to true or false.
*/
property showTicks      get mShowTicks set setShowTicks
metadata showTicks.editor is "com.livecode.pi.boolean"

--mark showOrigin24or12
/**
Syntax:
set the showOrigin24or12 of <widget> to <pTrueOrFalse>
get the showOrigin24or12 of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the showOrigin24or12 of widget "AClox" to not \
    the showOrigin24or12 of widget "AClox"

Summary: Controls the visibility of the clock's origin, indicating 24-hours display (double) or 12-hours display (single).

Description:
Use the showOrigin24or12 property to set the visibility of the clock's origin to true or false. These are two overlapped disks if the 24-hours display is active, else it is one disk at the origin.
If one of hours hand, minute hand or seconds hand is visible and showOrigin24or12 is set to false then there is a "nub circle" drawn at the origin.
*/
property showOrigin24or12       get mShowOrigin24or12 set setShowOrigin24or12
metadata showOrigin24or12.editor  is "com.livecode.pi.boolean"

--mark is24HoursDisplay
/**
Syntax:
set the is24HoursDisplay of <widget> to <pTrueOrFalse>
get the is24HoursDisplay of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the is24HoursDisplay of widget "AClox" to not \
    the is24HoursDisplay of widget "AClox"

Summary: is24HoursDisplay divides, if set to true, the 360 degree circle into 24 parts, for the hours only, minutes and seconds are indicated as usual (60 minutes & 60 seconds per "round"). If is24HoursDisplay is set to false, the the 360 degree circle is divided into 12 hours & 60 minutes & 60 seconds per "round".

Description:
Use the is24HoursDisplay property to switch between a 24-hours clock and a 12-hours clock.
This choice is reflected by the clock's ticks and/or the clock's origin (if their visibility is set to true).
*/
property is24HoursDisplay   get mIs24 set setIs24
metadata is24HoursDisplay.editor  is "com.livecode.pi.boolean"

--mark allowContextMenu
/**
Syntax:
set the allowContextMenu of <widget> to <pTrueOrFalse>
get the allowContextMenu of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the allowContextMenu of widget "AClox" to not \
    the allowContextMenu of widget "AClox"

Summary: Whether to show a context menu (rightClick).

Description:
Use the allowContextMenu property to allow/disallow the context menu for switching between modes (all arcs, all dots, all hands).
*/
property allowContextMenu   get mAllowContextMenu set setAllowContextMenu
metadata allowContextMenu.editor  is "com.livecode.pi.boolean"

--mark allowGrab
/**
Syntax:
set the allowGrab of <widget> to <pTrueOrFalse>
get the allowGrab of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the allowGrab of widget "AClox" to not \
    the allowGrab of widget "AClox"

Summary: Whether to allow grabbing the widget.

Description:
Use the allowGrab property to allow/disallow grabbing the widget by mouseDown.
*/
property allowGrab get mAllowGrab set setAllowGrab
metadata allowGrab.editor  is "com.livecode.pi.boolean"


--mark digitSize
/**
Syntax:
set the digitSize of <widget> to <pInteger>
get the digitSize of <widget>

Parameters:
pInteger: an integer > 9

Example:
set the digitSize of widget "AClox" to 13
get the digitSize of widget "AClox" -- returns 13

Summary: The size of the textual time display.

Description:
Use the digitSize property to set the size of the textual time display (*if hands are not drawn*). The digitSize is limited to 0.25*the clockRadius.
*/
property digitSize   get mDigitSize set setDigitSize
metadata digitSize.editor  is "com.livecode.pi.number"
metadata digitSize.min  is "10"
metadata digitSize.step  is "1"
metadata digitSize.section  is "Text"

--mark autoDigitSize
/**
Syntax:
set the autoDigitSize of <widget> to <pTrueOrFalse>
get the autoDigitSize of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the autoDigitSize of widget "AClox" to not \
    the autoDigitSize of widget "AClox"

Summary: Whether to automatic size the digital display (*if hands are not drawn*).

Description:
Use the autoDigitSize property to set the digitSize to round(0.18*the clockRadius).
*/
property autoDigitSize   get mAutoDigitSize set setAutoDigitSize
metadata autoDigitSize.editor is "com.livecode.pi.boolean"
metadata autoDigitSize.section is "Text"

--mark showDigital
/**
Syntax:
set the showDigital of <widget> to <pTrueOrFalse>
get the showDigital of <widget>

Parameters:
pTrueOrFalse: is true or false

Example:
set the showDigital of widget "AClox" to not \
    the showDigital of widget "AClox"

Summary: Whether to show a centered digital time.

Description:
Use the showDigital property to show/hide a digital time display *if no hands are drawn*.
*/
property showDigital   get mShowDigital set setShowDigital
metadata showDigital.editor  is "com.livecode.pi.boolean"
metadata showDigital.section  is "Text"

property textSize get mNothing set doNothing
metadata textSize.user_visible is "false"


end widget
